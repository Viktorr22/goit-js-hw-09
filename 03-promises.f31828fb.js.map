{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAASC,SAASC,cAAc,UAChCC,EAAaF,SAASC,cAAc,uBACpCE,EAAYH,SAASC,cAAc,sBACnCG,EAASJ,SAASC,cAAc,wBA0BtC,SAASI,EAAcC,EAAUC,GAC9B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC1BC,YAAW,KACYC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAEH,E,MAAUC,IAGpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE7BA,EAAM,G,CAjCbR,EAAOe,iBAAiB,SAExB,SAAkBC,GAChBA,EAAMC,iBACN,MAAMC,EAAkBC,OAAOhB,EAAWiB,OACpCC,EAAiBF,OAAOf,EAAUgB,OAClCE,EAAcH,OAAOd,EAAOe,OAElC,IAAK,IAAIG,EAAI,EAAGA,GAAKD,EAAaC,GAAK,EAAG,CAExCjB,EAAciB,EADGL,EAAkBG,GAAkBE,EAAI,IAEtDC,MAAK,EAACjB,SAAEA,EAAQC,MAAEA,MACZiB,EAAA3B,GAAS4B,OAAOC,QAAQ,uBAAqBpB,QAAiBC,MAAU,IAG9EoB,OAAM,EAACrB,SAAEA,EAAQC,MAAEA,MACbiB,EAAA3B,GAAS4B,OAAOG,QAAQ,sBAAoBtB,QAAiBC,MAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst button = document.querySelector('button');\nconst firstDelay = document.querySelector('input[name=\"delay\"]');\nconst stepDelay = document.querySelector('input[name=\"step\"]');\nconst amount = document.querySelector('input[name=\"amount\"]');\n\n\nbutton.addEventListener('click', onSubmit);\n\nfunction onSubmit(event) {\n  event.preventDefault();\n  const inputFirstDelay = Number(firstDelay.value);\n  const inputStepDelay = Number(stepDelay.value);  \n  const inputAmount = Number(amount.value);  \n\n  for (let i = 1; i <= inputAmount; i += 1) {\n    const stepTime = inputFirstDelay + inputStepDelay * (i - 1);\n    createPromise(i, stepTime)\n      .then(({ position, delay }) => {\n             Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n            //  console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n            })\n      .catch(({ position, delay }) => {\n             Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`)\n            //  console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n            });  \n\n  }\n}\n\nfunction createPromise(position, delay) {  \n   return new Promise((resolve, reject) => {\n      setTimeout(() => {\n       const shouldResolve = Math.random() > 0.3;\n       if (shouldResolve) {\n         resolve({ position, delay });\n       }\n       else {\n         reject({ position, delay });\n  }\n    }, delay);\n  });\n}\n\n\n\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$button","document","querySelector","$47d4ff9957288465$var$firstDelay","$47d4ff9957288465$var$stepDelay","$47d4ff9957288465$var$amount","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","event","preventDefault","inputFirstDelay","Number","value","inputStepDelay","inputAmount","i","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.f31828fb.js.map"}