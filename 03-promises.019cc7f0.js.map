{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAASC,SAASC,cAAc,UAChCC,EAAaF,SAASC,cAAc,uBACpCE,EAAYH,SAASC,cAAc,sBACnCG,EAASJ,SAASC,cAAc,wBA0BtC,SAASI,EAAcC,EAAUC,GAC9B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC1BC,YAAW,WACYC,KAAKC,SAAW,GAEpCJ,EAAQ,CAAEH,WAAUC,UAGpBG,EAAO,CAAEJ,WAAUC,S,GAErBA,E,IAjCPR,EAAOe,iBAAiB,SAExB,SAAkBC,GAChBA,EAAMC,iBAKN,IAJA,IAAMC,EAAkBC,OAAOhB,EAAWiB,OACpCC,EAAiBF,OAAOf,EAAUgB,OAClCE,EAAcH,OAAOd,EAAOe,OAEzBG,EAAI,EAAGA,GAAKD,EAAaC,GAAK,EAAG,CAExCjB,EAAciB,EADGL,EAAkBG,GAAkBE,EAAI,IAEtDC,MAAK,SAAAC,G,IAAGlB,EAAQkB,EAARlB,SAAUC,EAAKiB,EAALjB,MACZkB,EAAA5B,GAAS6B,OAAOC,QAAQ,uBAAwCC,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,M,IAG5EsB,OAAM,SAAAL,G,IAAGlB,EAAQkB,EAARlB,SAAUC,EAAKiB,EAALjB,MACbkB,EAAA5B,GAAS6B,OAAOI,QAAQ,sBAAuCF,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst button = document.querySelector('button');\nconst firstDelay = document.querySelector('input[name=\"delay\"]');\nconst stepDelay = document.querySelector('input[name=\"step\"]');\nconst amount = document.querySelector('input[name=\"amount\"]');\n\n\nbutton.addEventListener('click', onSubmit);\n\nfunction onSubmit(event) {\n  event.preventDefault();\n  const inputFirstDelay = Number(firstDelay.value);\n  const inputStepDelay = Number(stepDelay.value);  \n  const inputAmount = Number(amount.value);  \n\n  for (let i = 1; i <= inputAmount; i += 1) {\n    const stepTime = inputFirstDelay + inputStepDelay * (i - 1);\n    createPromise(i, stepTime)\n      .then(({ position, delay }) => {\n             Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n            //  console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n            })\n      .catch(({ position, delay }) => {\n             Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`)\n            //  console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n            });  \n\n  }\n}\n\nfunction createPromise(position, delay) {  \n   return new Promise((resolve, reject) => {\n      setTimeout(() => {\n       const shouldResolve = Math.random() > 0.3;\n       if (shouldResolve) {\n         resolve({ position, delay });\n       }\n       else {\n         reject({ position, delay });\n  }\n    }, delay);\n  });\n}\n\n\n\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$button","document","querySelector","$ce04d3a99e08e73b$var$firstDelay","$ce04d3a99e08e73b$var$stepDelay","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","event","preventDefault","inputFirstDelay","Number","value","inputStepDelay","inputAmount","i","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.019cc7f0.js.map"}